// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PeerCommunicationClient is the client API for PeerCommunication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeerCommunicationClient interface {
	GetLatestBlock(ctx context.Context, in *GetLatestBlockParams, opts ...grpc.CallOption) (*Block, error)
	GetFullBlockChain(ctx context.Context, in *GetFullBlockChainParams, opts ...grpc.CallOption) (*BlockChain, error)
	SubscribeNewBlocks(ctx context.Context, in *SubscribeNewBlocksParams, opts ...grpc.CallOption) (PeerCommunication_SubscribeNewBlocksClient, error)
}

type peerCommunicationClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerCommunicationClient(cc grpc.ClientConnInterface) PeerCommunicationClient {
	return &peerCommunicationClient{cc}
}

func (c *peerCommunicationClient) GetLatestBlock(ctx context.Context, in *GetLatestBlockParams, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/networking.PeerCommunication/GetLatestBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerCommunicationClient) GetFullBlockChain(ctx context.Context, in *GetFullBlockChainParams, opts ...grpc.CallOption) (*BlockChain, error) {
	out := new(BlockChain)
	err := c.cc.Invoke(ctx, "/networking.PeerCommunication/GetFullBlockChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerCommunicationClient) SubscribeNewBlocks(ctx context.Context, in *SubscribeNewBlocksParams, opts ...grpc.CallOption) (PeerCommunication_SubscribeNewBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PeerCommunication_serviceDesc.Streams[0], "/networking.PeerCommunication/SubscribeNewBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerCommunicationSubscribeNewBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PeerCommunication_SubscribeNewBlocksClient interface {
	Recv() (*Block, error)
	grpc.ClientStream
}

type peerCommunicationSubscribeNewBlocksClient struct {
	grpc.ClientStream
}

func (x *peerCommunicationSubscribeNewBlocksClient) Recv() (*Block, error) {
	m := new(Block)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PeerCommunicationServer is the server API for PeerCommunication service.
// All implementations must embed UnimplementedPeerCommunicationServer
// for forward compatibility
type PeerCommunicationServer interface {
	GetLatestBlock(context.Context, *GetLatestBlockParams) (*Block, error)
	GetFullBlockChain(context.Context, *GetFullBlockChainParams) (*BlockChain, error)
	SubscribeNewBlocks(*SubscribeNewBlocksParams, PeerCommunication_SubscribeNewBlocksServer) error
	mustEmbedUnimplementedPeerCommunicationServer()
}

// UnimplementedPeerCommunicationServer must be embedded to have forward compatible implementations.
type UnimplementedPeerCommunicationServer struct {
}

func (UnimplementedPeerCommunicationServer) GetLatestBlock(context.Context, *GetLatestBlockParams) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestBlock not implemented")
}
func (UnimplementedPeerCommunicationServer) GetFullBlockChain(context.Context, *GetFullBlockChainParams) (*BlockChain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullBlockChain not implemented")
}
func (UnimplementedPeerCommunicationServer) SubscribeNewBlocks(*SubscribeNewBlocksParams, PeerCommunication_SubscribeNewBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeNewBlocks not implemented")
}
func (UnimplementedPeerCommunicationServer) mustEmbedUnimplementedPeerCommunicationServer() {}

// UnsafePeerCommunicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeerCommunicationServer will
// result in compilation errors.
type UnsafePeerCommunicationServer interface {
	mustEmbedUnimplementedPeerCommunicationServer()
}

func RegisterPeerCommunicationServer(s grpc.ServiceRegistrar, srv PeerCommunicationServer) {
	s.RegisterService(&_PeerCommunication_serviceDesc, srv)
}

func _PeerCommunication_GetLatestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestBlockParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerCommunicationServer).GetLatestBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networking.PeerCommunication/GetLatestBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerCommunicationServer).GetLatestBlock(ctx, req.(*GetLatestBlockParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerCommunication_GetFullBlockChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullBlockChainParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerCommunicationServer).GetFullBlockChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networking.PeerCommunication/GetFullBlockChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerCommunicationServer).GetFullBlockChain(ctx, req.(*GetFullBlockChainParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerCommunication_SubscribeNewBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeNewBlocksParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PeerCommunicationServer).SubscribeNewBlocks(m, &peerCommunicationSubscribeNewBlocksServer{stream})
}

type PeerCommunication_SubscribeNewBlocksServer interface {
	Send(*Block) error
	grpc.ServerStream
}

type peerCommunicationSubscribeNewBlocksServer struct {
	grpc.ServerStream
}

func (x *peerCommunicationSubscribeNewBlocksServer) Send(m *Block) error {
	return x.ServerStream.SendMsg(m)
}

var _PeerCommunication_serviceDesc = grpc.ServiceDesc{
	ServiceName: "networking.PeerCommunication",
	HandlerType: (*PeerCommunicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestBlock",
			Handler:    _PeerCommunication_GetLatestBlock_Handler,
		},
		{
			MethodName: "GetFullBlockChain",
			Handler:    _PeerCommunication_GetFullBlockChain_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeNewBlocks",
			Handler:       _PeerCommunication_SubscribeNewBlocks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "networking.proto",
}
